
    if((size=read(fd, buf, 1023)) == -1) {
        perror("read");
        exit(1);
    }
    buf[size]='\0';
    printf("buf : %s\n", buf);

    close(fd);

    return (0);
}
#include <stdio.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <unistd.h>
#include <stdlib.h>

int main(int argc, char* argv[])
{
    if(argc!=2) {
        fprintf(stderr, "USage : %s filename\n", argv[0]);
        exit(1);
    }
    struct stat fbuf;

    if(stat(argv[1], &fbuf) == -1) {
        perror("stat");
        exit(1);
    }

    printf("inode : %d, size :%ld\n", (int)fbuf.st_ino, fbuf.st_size);

    if(S_ISDIR(fbuf.st_mode)) {
        printf("Directory\n"); // opendir
    } else if(S_ISREG(fbuf.st_mode)) {
        printf("Regular File\n"); // open
    }

    return (0);
}
#include <stdio.h>
#include <stdlib.h>
#include <sys/time.h>
#include <time.h>

int main()
{
    struct timeval tv;
    gettimeofday(&tv, NULL);
    printf("tv_sec : %d, tv_userc : %ld\n", (int) tv.tv_sec, tv.tv_usec);

    struct timespec ts;
    clock_gettime(CLOCK_REALTIME, &ts);

    printf("tv_sec : %d, tv_nes : %ld\n", (int) ts.tv_sec, ts.tv_nsec);

    time_t rawtime;
    time(&rawtime);
    printf("current time : %u\n", (unsigned)rawtime);

    struct timeval mytime;
    gettimeofday(&mytime, NULL);
    printf("gettimeofday : %ld/%ld\n", mytime.tv_sec, mytime.tv_usec);

    printf("current time : %s", ctime(&rawtime));

    putenv("TZ=PST3PDT");
    tzset();
    struct tm *tm;
    tm = localtime(&rawtime);
    printf("asctime : %s", asctime(tm));

    char buf[BUFSIZ];
    strftime(buf, sizeof(buf), "%a %b %e %H:%M:%S %Y", tm);
    printf("strftime : %s\n", buf);

    return (0);
}
#include <stdio.h>
#include <stdlib.h>
#include <fcntl.h>
#include <unistd.h>
#include <string.h>

int file_lock(int fd, int offset);
int file_unlock(int fd, int offset);

int main(int argc, char* argv[])
{
    int fd;
    char buf[16];

    int offset = atoi(argv[1])*16;


    if((fd=open("rlock.txt", O_RDWR))==-1){
        perror("open");
        exit(1);
    }
    // 파일 lock 을 설정, lock을 설정하지 못하는 경우 -1 반환
    if(file_lock(fd, offset)==-1) {
        perror("file_lock");
        exit(1);
    }

    int n;
    memset(buf, 0, 16);
    lseek(fd, offset, SEEK_SET);
    if((n=read(fd, buf, 16))==-1) {
        perror("read");
        exit(1);
    }

    printf("buf : %s\n", buf);

    lseek(fd, offset, SEEK_SET);
    sprintf(buf, "%d",atoi(buf)+1);
    write(fd, buf, 16);
    sleep(10);
    if(file_unlock(fd, offset)==-1) {
        perror("file_unlock");
        exit(1);
    }
    close(fd);

}

int file_lock(int fd, int offset)
{
    struct flock lock;

    lock.l_type=F_WRLCK;
    lock.l_whence=SEEK_SET;
    lock.l_start=offset;
    lock.l_len=16;
    return fcntl(fd, F_SETLKW, &lock);
}

int file_unlock(int fd, int offset)
{
    struct flock lock;

    lock.l_type=F_UNLCK;
    lock.l_whence=SEEK_SET;
    lock.l_start=offset;
    lock.l_len=16;
    return fcntl(fd, F_SETLK, &lock);
}
#include <unistd.h>
#include <stdio.h>
#include <stdlib.h>

int main()
{
    // 원본 파일이 존재하는지 확인
    if (access("flock.txt", F_OK) == -1) {
        perror("flock.txt does not exist");
        exit(1);
    }

    // 하드 링크 생성
    if (link("flock.txt", "hlink.txt") == -1) {
        perror("link");
        exit(1);
    }

    // 파일 목록 출력
    system("ls -l flock.txt hlink.txt");

    // 심볼릭 링크 생성
    if (symlink("flock.txt", "slink.txt") == -1) {
        perror("symlink");
        exit(1);
    }

    // 모든 파일 목록 출력
    system("ls -al flock.txt hlink.txt slink.txt");

    return 0;
}
#include <stdio.h>
#include <stdlib.h>
#include <fcntl.h>
#include <unistd.h>

int main(int argc, char *argv[])
{
    int fd;

    if(argc!=2) {
        fprintf(stderr, "Usage: %s filename\n", argv[0]);
        exit(1);
    }

    if((fd=open(argv[1], O_RDONLY)) == -1) {
        perror("open");
        exit(1);
    }

    printf("fd :  %d\n", fd);

    char buf[1024];
    int size;

    if((size=read(fd, buf, 1023)) == -1) {
        perror("read");
        exit(1);
    }

    buf[size]='\0';

    int ofd;

    if((ofd=open("test.c", O_WRONLY|O_CREAT|O_TRUNC, 0777)) == -1) {
        perror("open");
        exit(1);
    }

    write(ofd, buf, size);

    close(fd);
    close(ofd);

    return (0);
}
#include <stdio.h>

int main() {
    puts("hello");
    return (0);
}
#include <stdio.h>
#include <stdlib.h>
#include <fcntl.h>
#include <unistd.h>

int file_open(int fd char* argv[]) {

    if(argc > 2) {
        fprintf(stderr, "USage : %s <file>\n", argv[0]);
    }

    if((fd=open(argv[1], O_RDONLY)) == -1) {
        perror("file is not open");
        exit(1);
    }

    return

}

int main(int argc, char* argv[]) {
    int fd;

    return (0);
}
#include <stdio.h>
#include <fcntl.h>
#include <unistd.h>
#include <stdlib.h>

int main()
{
    printf("Hello dup\n");

    int fd;
    fd=open("dup.txt", O_WRONLY | O_CREAT | O_TRUNC, 0644);
    if(fd == -1) {
        perror("open");
        exit(1);
    }
    // close(1);
    //dup(fd);

    dup2(fd, 1);
    printf("Hello dup2\n");

    return (0);
}
#include <stdio.h>

int main() {
    puts("hello");
    return (0);
}
#include <stdio.h>
#include <stdlib.h>
#include <fcntl.h>
#include <unistd.h>

int main(int argc, char *argv[])
{
    int fd;

    if(argc!=2) {
        fprintf(stderr, "Usage: %s filename\n", argv[0]);
        exit(1);
    }

